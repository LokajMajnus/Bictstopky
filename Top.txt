library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Top is
	Port ( 
		clk_i : in STD_LOGIC;
		btn_i : in STD_LOGIC_VECTOR (3 downto 0);
		disp_digit_o : out STD_LOGIC_VECTOR (3 downto 0);
		disp_sseg_o : out STD_LOGIC_VECTOR (7 downto 0)
		);
end Top;

architecture Behavioral of Top is 
component Display_Module
	port (
		clk_i : in STD_LOGIC;
		data0 : in STD_LOGIC_VECTOR ( 3 downto 0);
		data1 : in STD_LOGIC_VECTOR ( 3 downto 0);
		data2 : in STD_LOGIC_VECTOR ( 3 downto 0);
		data3 : in STD_LOGIC_VECTOR ( 3 downto 0);
		data_port0 : in STD_LOGIC;
		data_port1 : in STD_LOGIC;
		data_port2 : in STD_LOGIC;
		data_port3 : in STD_LOGIC;
		counter : in STD_LOGIC;
		disp_digit_o : out STD_LOGIC_VECTOR ( 3 downto 0);
		disp_sseg_o : out STD_LOGIC_VECTOR ( 7 downto 0)); 
end component;

component counter
	port ( clk_i : in STD_LOGIC;
		ms_1 : out STD_LOGIC;
		ms_10 : out STD_LOGIC;
		s_05 : out STD_LOGIC;
		s_1 : out STD_LOGIC);
end component;

component time_core 
	port ( clk_i : in STD_LOGIC;
		counter : in STD_LOGIC;
		bl : in STD_LOGIC;
		btn_i : in STD_LOGIC_VECTOR (3 downto 0);
		setiny : out STD_LOGIC_VECTOR (3 downto 0);
		desetiny : out STD_LOGIC_VECTOR (3 downto 0);
		jednotky : out STD_LOGIC_VECTOR (3 downto 0);
		desitky : out STD_LOGIC_VECTOR (3 downto 0));
end component;

signal data0 : STD_LOGIC_VECTOR (3 downto 0);
signal data1 : STD_LOGIC_VECTOR (3 downto 0);
signal data2 : STD_LOGIC_VECTOR (3 downto 0);
signal data3 : STD_LOGIC_VECTOR (3 downto 0);
signal data_port0 : STD_LOGIC := '1';
signal data_port1 : STD_LOGIC := '1';
signal data_port2 : STD_LOGIC := '0';
signal data_port3 : STD_LOGIC := '1';
signal clk_i_en : STD_LOGIC;
signal ms_1 : STD_LOGIC;
signal ms_10 : STD_LOGIC;
signal s_05 : STD_LOGIC;
signal s_1 : STD_LOGIC;
begin

Display_Module_0:Display_Module
	port map (	clk_i => clk_i,
			data0 => data0,
			data1 => data1,
			data2 => data2,
			data3 => data3,
			data_port0 => data_port0,
			data_port1 => data_port1,
			data_port2 => data_port2,
			data_port3 => data_port3,
			counter => ms_1,
			disp_digit_o => disp_digit_o,
			disp_sseg_o => disp_sseg_o);

counter_0:counter
	port map ( clk_i => clk_i,
			ms_1 => ms_1,
			ms_10 => ms_10,
			s_1 => s_1);

time_core_0:time_core
	port map (clk_i => clk_i,
			counter => ms_10,
			bl => s_1,
			btn_i => btn_i,
			setiny => data0,
			desetiny => data1,
			jednotky => data2,
			desitky => data3);
end behavioral;